#!/bin/bash
AUDIO=101
TIME=8000
setSink () {
    sink=$1
    name=$2

    echo $sink $name
    if [ "$sink" == "alsa_output.pci-0000_03_00.1.3.pro-output-10" ];then
        pactl set-card-profile alsa_card.pci-0000_03_00.1.3  pro-audio
    elif [ "$sink" == "alsa_output.pci-0000_03_00.1.3.hdmi-stereo" ];then
        pactl set-card-profile alsa_card.pci-0000_03_00.1.3  output:hdmi-stereo 
    fi
    # name =$2
    # echo $sink $name
    sink_inputs=$(pactl list sink-inputs short | awk '{print $1}')
    arr=($sink_inputs)
    for i in "${arr[@]}"
    do
        pactl move-sink-input $i $sink
    # or do whatever with individual element of the array
    done
    pactl set-default-sink $sink
    card_name=$(echo $sink | awk -F "." '{print $2}')
    volumectl u
    # dunstify "Switched to" "$name" -r $AUDIO -i audio-headset -t $TIME
    exit 0
    # pactl move-sink-input $INPUT $NEW_SINK

}
toggle_profile() {
    card="44_F0_9E_67_A7_25"
    card_index="$(pactl list cards short | grep "$card" | awk '{print $1}')"
    active_profile=$(pactl list cards | grep -m 1 $card  -A 44 | grep "Active Profile:" | sed 's|^.*: ||')
    echo "current profile is" $active_profile
    if [[ "$active_profile" == "a2dp-sink-aac" ]];then
        echo "switching to headset-head-unit-cvsd"
        pactl set-card-profile $card_index "headset-head-unit-cvsd"
    else
        echo "switching to a2dp-sink-aac"
        pactl set-card-profile $card_index "a2dp-sink-aac"
    fi
} 

verbose='false'
while getopts 'twa:d:s:v' flag; do
  case "${flag}" in
    t)  val="${OPTARG}" 
        toggle_profile
	    ;;
    w)  val="${OPTARG}" 
        switch_source
	    ;;
    a)  val="${OPTARG}" 
        inc_volume $val
        #pactl -- set-sink-volume $sink +$val%
	    ;;
    d)  val="${OPTARG}" 
        pulseaudio-ctl down $val  &&     dunstify "Volume $volume" -h int:value:$(pamixer --get-volume) -a sound -r $msgId -u low
        ;;
    s)  val="${OPTARG}"
        name=$3
        echo $3
        setSink "${val}" "${name}"
        #pactl -- set-sink-volume $sink $val%
        ;;
    v) verbose='true' ;;
    *) error "Unexpected option ${flag}" ;;
  esac
done

exec 23> "/tmp/planner.lock"
if ! flock -n 23  ; then
    printf 'another instance is running\n';
    exit 1
 fi